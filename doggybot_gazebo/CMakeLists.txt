cmake_minimum_required(VERSION 3.8)
project(doggybot_gazebo)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(urdf REQUIRED)
find_package(xacro REQUIRED)
#find_package(launch_ros REQUIRED)
find_package(ros_gz_sim REQUIRED)
find_package(rviz2 REQUIRED)
find_package(rclcpp REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(doggybot_description REQUIRED)
find_package(doggybot_controller REQUIRED)

include_directories( include )
add_library( broadcaster SHARED src/tf_broadcast.cpp )
ament_target_dependencies( broadcaster rclcpp geometry_msgs tf2_ros tf2_geometry_msgs geometry_msgs doggybot_controller)

add_executable( tf_node src/tf_broadcast.cpp )
target_link_libraries( tf_node broadcaster)
ament_target_dependencies( tf_node rclcpp tf2_ros tf2_geometry_msgs)

install( TARGETS broadcaster LIBRARY DESTINATION lib)
install( TARGETS tf_node DESTINATION lib/${PROJECT_NAME} )

install( DIRECTORY include/ DESTINATION include)
install( DIRECTORY launch DESTINATION share/${PROJECT_NAME} )
install( DIRECTORY worlds DESTINATION share/${PROJECT_NAME} )
install( DIRECTORY config DESTINATION share/${PROJECT_NAME} )
install( DIRECTORY rviz DESTINATION share/${PROJECT_NAME} )


if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
